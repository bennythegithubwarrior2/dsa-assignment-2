import ballerina/http;
import ballerina/io;
import ballerina/url;
import ballerina/lang.'int as int;

// Define the Course record type
type Course record {|    
    string courseCode;  
    string courseName; 
    int nqfLevel;      
    string year;       
|};

// Define the Programme record type
type Programme record {| 
    readonly string programmeCode; 
    int nqfLevel;                  
    string qualificationTitle;     
    string faculty;                
    string department;             
    string registrationDate;       
    int duration;                  
    Course[][] coursesByYear;      
|};

// Array to store Programme records
Programme[] programmes = [];

// Initialize the HTTP client to interact with the service at localhost:9090
http:Client clientEndpoint = check new("http://localhost:9090");

public function main() returns error? {
    while true {
        // Prompt user to select an action
        string action = getUserInput("Standard, Express, International, retrieve details, retrieve all,  (add/update/delete/retrieve/exit): ");
        if action.toLowerAscii() == "exit" {
            break;
        } else if action.toLowerAscii() == "standard" {
            check addProgramme();
        } else if action.toLowerAscii() == "express" {
            check updateProgramme();
        } else if action.toLowerAscii() == "international" {
            check deleteProgramme();
        } else if action.toLowerAscii() == "retrieve" {
            check retrieveProgrammeDetails();
        } else if action.toLowerAscii() == "retrieve-all" {
            check retrieveAllProgrammes();
        } else if action.toLowerAscii() == "review" {
            check retrieveDueForReview();
        } else if action.toLowerAscii() == "faculty" {
            check retrieveProgrammesByFaculty();
        } else {
            io:println("Invalid action. Please enter 'add', 'update', 'delete', 'retrieve', 'retrieve-all', 'review', 'faculty', or 'exit'.");
        }
    }
}

// Function to add a new programme
function addProgramme() returns error? {
    while true {
        io:println("\nAdding a new programme...");
        // Create a new Programme record with user input
        Programme newProgramme = {
            programmeCode: getUserInput("Enter Programme Code: "),
            nqfLevel: check int:fromString(getUserInput("Enter NQF Level: ")), // Convert string input to int
            qualificationTitle: getUserInput("Enter Qualification Title: "),
            faculty: getUserInput("Enter Faculty: "),
            department: getUserInput("Enter Department: "),
            registrationDate: getUserInput("Enter Registration Date (yyyy-MM-dd): "),
            duration: check int:fromString(getUserInput("Enter Programme Duration in years: ")), // Convert string input to int
            coursesByYear: []
        };

        // Add courses to the programme
        io:println("Add courses (Enter 'done' to finish adding courses)");
        while true {
            string courseCode = getUserInput("Enter Course Code (or 'done' to finish): ");
            if courseCode.toLowerAscii() == "done" {
                break;
            }
            string year = getUserInput("Enter the year of the course (1st/2nd/3rd/4th): ");
            // Create a new Course record with user input
            Course course = {
                courseCode: courseCode,
                courseName: getUserInput("Enter Course Name: "),
                nqfLevel: check int:fromString(getUserInput("Enter Course NQF Level: ")), // Convert string input to int
                year: year
            };
            // Determine the year index for storing the course
            int yearIndex = check int:fromString(year.substring(0, 1)) - 1;
            if newProgramme.coursesByYear.length() <= yearIndex {
                // If the year index does not exist, create a new list for that year
                newProgramme.coursesByYear.push([course]);
            } else {
                // If the year index exists, add the course to the existing list
                newProgramme.coursesByYear[yearIndex].push(course);
            }
        }

        // Perform HTTP POST to add a new programme
        http:Response|error response = clientEndpoint->post("/programmes", newProgramme);
        check handleResponse(response, "Programme added successfully");

        string anotherProgramme = getUserInput("Would you like to add another programme? (yes/no): ");
        if anotherProgramme.toLowerAscii() != "yes" {
            break;
        }
    }
}

// Function to update an existing programme
function updateProgramme() returns error? {
    io:println("\nUpdating an existing programme...");
    string programmeCode = getUserInput("Enter Programme Code to Update: ");
    // Create an updated Programme record with user input
    Programme updatedProgramme = {
        programmeCode: programmeCode,
        nqfLevel: check int:fromString(getUserInput("Enter updated NQF Level: ")), // Convert string input to int
        qualificationTitle: getUserInput("Enter updated Qualification Title: "),
        faculty: getUserInput("Enter updated Faculty: "),
        department: getUserInput("Enter updated Department: "),
        registrationDate: getUserInput("Enter updated Registration Date (yyyy-MM-dd): "),
        duration: check int:fromString(getUserInput("Enter updated Programme Duration in years: ")), // Convert string input to int
        coursesByYear: []
    };

    // Update courses by year for the programme
    while true {
        string yearToUpdate = getUserInput("Which year's courses would you like to update? (1st/2nd/3rd/4th/none): ");
        if yearToUpdate.toLowerAscii() == "none" {
            break;
        }
        string action = getUserInput("Would you like to add, modify, or delete a course for " + yearToUpdate + " year? (add/modify/delete): ");
        int yearIndex = check int:fromString(yearToUpdate.substring(0, 1)) - 1;
        if action.toLowerAscii() == "add" {
            // Add new courses for the specified year
            io:println("Add courses for " + yearToUpdate + " year (Enter 'done' to finish adding courses)");
            while true {
                string courseCode = getUserInput("Enter Course Code (or 'done' to finish): ");
                if courseCode.toLowerAscii() == "done" {
                    break;
                }
                Course course = {
                    courseCode: courseCode,
                    courseName: getUserInput("Enter Course Name: "),
                    nqfLevel: check int:fromString(getUserInput("Enter Course NQF Level: ")), // Convert string input to int
                    year: yearToUpdate
                };
                if updatedProgramme.coursesByYear.length() <= yearIndex {
                    // If the year index does not exist, create a new list for that year
                    updatedProgramme.coursesByYear.push([course]);
                } else {
                    // If the year index exists, add the course to the existing list
                    updatedProgramme.coursesByYear[yearIndex].push(course);
                }
            }
        } else if action.toLowerAscii() == "modify" {
            // Modify existing courses for the specified year
            string courseCodeToModify = getUserInput("Enter Course Code to modify: ");
            if updatedProgramme.coursesByYear.length() > yearIndex {
                foreach int i in 0 ..< updatedProgramme.coursesByYear[yearIndex].length() {
                    if updatedProgramme.coursesByYear[yearIndex][i].courseCode == courseCodeToModify {
                        updatedProgramme.coursesByYear[yearIndex][i].courseName = getUserInput("Enter updated Course Name: ");
                        updatedProgramme.coursesByYear[yearIndex][i].nqfLevel = check int:fromString(getUserInput("Enter updated Course NQF Level: "));
                        break;
                    }
                }
            }
        } else if action.toLowerAscii() == "delete" {
            // Delete a course for the specified year
            string courseCodeToRemove = getUserInput("Enter Course Code to remove: ");
            if updatedProgramme.coursesByYear.length() > yearIndex {
                updatedProgramme.coursesByYear[yearIndex] = from Course c in updatedProgramme.coursesByYear[yearIndex]
                                                            where c.courseCode != courseCodeToRemove
                                                            select c;
            }
        } else {
            io:println("Invalid action. Please enter 'add', 'modify', or 'delete'.");
        }
    }

    // Perform HTTP PUT to update the programme
    http:Response|error response = clientEndpoint->put("/programmes/" + urlEncode(programmeCode), updatedProgramme);
    check handleResponse(response, "Programme updated successfully");
}

// Function to delete a programme
function deleteProgramme() returns error? {
    io:println("\nDeleting a programme...");
    string programmeCode = getUserInput("Enter Programme Code to Delete: ");
    // Perform HTTP DELETE to delete the programme
    http:Response|error response = clientEndpoint->delete("/programmes/" + urlEncode(programmeCode));
    check handleResponseForDelete(response, "Programme deleted successfully");
}

// Function to retrieve the details of a specific programme by programme code
function retrieveProgrammeDetails() returns error? {
    string programmeCode = getUserInput("Enter Programme Code to Retrieve: ");
    // Perform HTTP GET to retrieve the programme details
    http:Response|error response = clientEndpoint->get("/programmes/" + urlEncode(programmeCode));
    check handleResponse(response, "Programme details retrieved successfully");
}

// Function to retrieve a list of all programmes
function retrieveAllProgrammes() returns error? {
    // Perform HTTP GET to retrieve all programmes
    http:Response|error response = clientEndpoint->get("/programmes");
    check handleResponse(response, "List of all programmes retrieved successfully");
}

// Function to retrieve all programmes that are due for review
function retrieveDueForReview() returns error? {
    string viewReview = getUserInput("Would you like to view programmes that are due for review? (yes/no): ");
    if viewReview.toLowerAscii() == "yes" {
        // Perform HTTP GET to retrieve programmes due for review
        http:Response|error response = clientEndpoint->get("/programmes/review");
        check handleResponse(response, "Programmes due for review");
    }
}

// Function to retrieve all programmes by faculty
function retrieveProgrammesByFaculty() returns error? {
    string facultyName = getUserInput("Enter the faculty name to retrieve all programmes: ");
    // Perform HTTP GET to retrieve programmes by faculty
    http:Response|error response = clientEndpoint->get("/programmes/faculty/" + urlEncode(facultyName));
    check handleResponse(response, "Programmes under the specified faculty");
}

// Function to handle responses from the server
function handleResponse(http:Response|error response, string successMessage) returns error? {
    if response is http:Response {
        if response.statusCode == 200 || response.statusCode == 201 {
            // Successfully handled response
            json responsePayload = check response.getJsonPayload();
            io:println(successMessage, ": ", responsePayload.toJsonString());
        } else {
            // Handle error response from server
            json errorMessage = check response.getJsonPayload();
            io:println("Failed request. Status Code: ", response.statusCode, ". Error: ", errorMessage.toJsonString());
        }
    } else {
        // Handle network or client-side errors
        io:println("Failed request: ", response.detail().toString());
    }
}

// Function to handle delete responses from the server
function handleResponseForDelete(http:Response|error response, string successMessage) returns error? {
    if response is http:Response {
        if response.statusCode == 204 {
            // Successfully deleted programme
            io:println(successMessage);
        } else {
            // Handle error response from server
            json errorMessage = check response.getJsonPayload();
            io:println("Failed request. Status Code: ", response.statusCode, ". Error: ", errorMessage.toJsonString());
        }
    } else {
        // Handle network or client-side errors
        io:println("Failed request: ", response.detail().toString());
    }
}

// Function to URL-encode strings for use in URLs
function urlEncode(string value) returns string {
    string|error encoded = url:encode(value, "UTF-8");
    if encoded is string {
        return encoded;
    } else {
        return value; // Return original value if encoding fails
    }
}

// Function to get user input dynamically
function getUserInput(string prompt) returns string {
    io:print(prompt);
    return io:readln();
}
