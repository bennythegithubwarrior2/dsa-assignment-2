import ballerina/io;
import ballerinax/kafka;

type requestShipment readonly & record {
    string shipmentType;
    string pickupLocation;
    string deliveryLocation;  
    int preferredTime;
    string firstName;
    string lastName;
    string contactNumber;
};

type LocationDistance readonly & record {
    int DistanceFromHQ;
};

type Client readonly & record {
    int id?;
    string Firstname;
    string Lastname;
    string address;
    string phone;
};

type Tracking readonly & record{
string trackingid;
string Firstname;
    string Lastname;

}


public function main() returns error? {
    kafka:Producer prod = check new (kafka:DEFAULT_URL);
    io:println("Welcome to the Kafka tutorial...");

    // Read user input for requestShipment
    io:println("Enter shipment type:");
    string shipmentType = io:readln();
    io:println("Enter pickup location:");
    string pickupLocation = io:readln();
    io:println("Enter delivery location:");
    string deliveryLocation = io:readln();
    io:println("Enter preferred time:");
    int preferredTime = check 'int:fromString(io:readln());
    io:println("Enter first name:");
    string firstName = io:readln();
    io:println("Enter last name:");
    string lastName = io:readln();
    io:println("Enter contact number:");
    string contactNumber = io:readln();

    requestShipment shipmentMsg = {
        shipmentType: shipmentType,
        pickupLocation: pickupLocation,
        deliveryLocation: deliveryLocation,
        preferredTime: preferredTime,
        firstName: firstName,
        lastName: lastName,
        contactNumber: contactNumber
    };

    // Read user input for LocationDistance
    io:println("Enter distance from HQ:");
    int distanceFromHQ = check 'int:fromString(io:readln());

    LocationDistance distanceMsg = {
        DistanceFromHQ: distanceFromHQ
    };

    // Read user input for Client
    io:println("Enter client first name:");
    string clientFirstName = io:readln();
    io:println("Enter client last name:");
    string clientLastName = io:readln();
    io:println("Enter client address:");
    string clientAddress = io:readln();
    io:println("Enter client phone:");
    string clientPhone = io:readln();

    Client clientMsg = {
        Firstname: clientFirstName,
        Lastname: clientLastName,
        address: clientAddress,
        phone: clientPhone
    };

    // Send messages to Kafka topics
    check prod->send({topic: "detailsCustomer", value: clientMsg});
    check prod->send({topic: "requestShipment", value: shipmentMsg});
    check prod->send({topic: "LocationDistance", value: distanceMsg});
}



-----------------------service---------------------------------------------

import ballerina/http;
import ballerina/log;
import ballerina/sql;
import ballerinax/mysql;
import ballerinax/mysql.driver as _;
import ballerinax/kafka;

const string DB_URL = "jdbc:mysql://127.0.0.1:3306/dsa_assignment";
const string DB_USER = "kenny";
const string DB_PASSWORD = "Kennyisthegoat21";

const int EXPRESS_TIME_CONFIRM = 10;
const int DISTANCE_CONFIRM = 100;
const int STANDARD_TIME_CONFIRM = 20;

type ShipmentRequest record {
    string shipmentType;
    string pickupLocation;
    string deliveryLocation;  
    int preferredTime;
    string firstName;
    string lastName;
    string contactNumber;
    string trackingId; 
};

type TrackingInfo record {
    string trackingId;
    string shipmentType;
    string pickupLocation;
    string deliveryLocation;
    string country;
    string areaID;
    string firstName;
    string lastName;
    string contactNumber;
};

type LocationDistance readonly & record {
    int DistanceFromHQ;
};

kafka:Producer producer = check new("localhost:9092");

function fetchLocationDistance(string areaName) returns int|error {
    mysql:Client dbClient = check new(DB_URL, DB_USER, DB_PASSWORD);
    log:printInfo("CONNECTED TO DATABASE");

    sql:ParameterizedQuery query = `SELECT DistanceFromHQ FROM serviceableareas WHERE AreaName = ${areaName}`;
    int locationDistance = 0;

    // Use a stream to process results
    stream<LocationDistance, sql:Error?> resultStream = dbClient->query(query);

    error? e = resultStream.forEach(function(LocationDistance result) {
        locationDistance = result.DistanceFromHQ;
    });

    if (e is error) {
        log:printError("Error occurred while processing the result stream", e);
        return e;
    }

    check dbClient.close();
    return locationDistance;
}

function insertShipmentRequest(ShipmentRequest request) returns error? {
    mysql:Client dbClient = check new(DB_URL, DB_USER, DB_PASSWORD);
    sql:ParameterizedQuery query = `INSERT INTO shipment_requests 
        (shipmentType, pickupLocation, deliveryLocation, preferredTime, firstName, lastName, contactNumber) 
        VALUES (${request.shipmentType}, ${request.pickupLocation}, ${request.deliveryLocation}, 
                ${request.preferredTime}, ${request.firstName}, ${request.lastName}, ${request.contactNumber})`;

    sql:ExecutionResult executionResult = check dbClient->execute(query);
    check dbClient.close();
    log:printInfo("Data inserted successfully");
}

function determineServiceType(ShipmentRequest request) returns string|error {
    log:printInfo("Determining service type for request: " + request.toString());
    int locationDistance = check fetchLocationDistance(request.deliveryLocation);

    if (locationDistance > DISTANCE_CONFIRM) {
        return "International";
    } else if (request.preferredTime > EXPRESS_TIME_CONFIRM) {
        return "Standard";
    } else if (request.preferredTime < STANDARD_TIME_CONFIRM) {
        return "Express";
    } else {
        return "Unknown";
    }
}

function sendTrackingInfoToKafka(TrackingInfo trackingInfo) returns error? {
    json trackingInfoJson = trackingInfo.toJsonString();
    check producer->send({
        topic: "trackingDelivery",
        value: trackingInfoJson
    });
    log:printInfo("Tracking information sent to Kafka topic");
}

service /logistics on new http:Listener(9090) {
    resource function post determineService(http:Caller caller, http:Request req) returns error? {
        json payload = check req.getJsonPayload();
        ShipmentRequest shipmentRequest = check payload.cloneWithType(ShipmentRequest);
        string serviceType = check determineServiceType(shipmentRequest);
        json response = { "recommendedService": serviceType };
        check caller->respond(response);
    }

    resource function post save(http:Caller caller, http:Request req) returns error? {
        json payload = check req.getJsonPayload();
        ShipmentRequest shipmentRequest = check payload.cloneWithType(ShipmentRequest);

        error? result = insertShipmentRequest(shipmentRequest);
        if (result is error) {
            log:printError("Error inserting data into database", result);
            check caller->respond({ message: "Failed to save data" });
        } else {
            check caller->respond({ message: "Data saved successfully" });

            TrackingInfo trackingDelivery = {
                trackingId: shipmentRequest.trackingId,
                shipmentType: shipmentRequest.shipmentType,
                pickupLocation: shipmentRequest.pickupLocation,
                deliveryLocation: shipmentRequest.deliveryLocation,
                country: "", 
                areaID: "",  
                firstName: shipmentRequest.firstName,
                lastName: shipmentRequest.lastName,
                contactNumber: shipmentRequest.contactNumber
            };

            check sendTrackingInfoToKafka(trackingDelivery);
        }
    }

    resource function post track(http:Caller caller, http:Request req) returns error {
        json payload = check req.getJsonPayload();
        string trackingId = (check payload.trackingId).toString();
    return (error("Failed to post"));
    }
}       

function init() {
    log:printInfo("---------SERVER IS RUNNING----------");
}
