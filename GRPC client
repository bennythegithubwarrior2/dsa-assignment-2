import ballerina/io;

// Create gRPC client endpoint
OnlineShoppingClient ep = check new ("http://localhost:9090");

public function main() returns error? {
    // Get user details dynamically
    string user_id = io:readln("Enter your user ID: ");
    string userRole = io:readln("Enter your role (admin/customer): ");

    // Check if user already exists or create user
    var createUserResult = createOrGetUser(user_id, userRole);
    if createUserResult is error {
        io:println("Error creating or getting user: ", createUserResult);
        return createUserResult;
    }

    // Admin Functions (Logical Flow)
    if userRole == "admin" {
        // Loop to add, update, or remove products
        while true {
            string adminOption = io:readln("Enter operation (add/update/remove/exit): ");
            if adminOption == "add" {
                // Add a product
                AddProductRequest addProductRequest = {
                    user_id: user_id,
                    product: {
                        name: io:readln("Enter product name: "),
                        description: io:readln("Enter product description: "),
                        price: check 'float:fromString(io:readln("Enter product price: ")),
                        stock_quantity: check 'int:fromString(io:readln("Enter stock quantity: ")),
                        sku: io:readln("Enter product SKU: "),
                        status: "available"
                    }
                };
                AddProductResponse addProductResponse = check ep->AddProduct(addProductRequest);
                io:println("AddProductResponse: ", addProductResponse);
            } else if adminOption == "update" {
                // Update a product
                string updateSku = io:readln("Enter the SKU of the product to update: ");
                UpdateProductRequest updateProductRequest = {
                    user_id: user_id,
                    sku: updateSku,
                    updated_product: {
                        name: io:readln("Enter updated product name: "),
                        description: io:readln("Enter updated product description: "),
                        price: check 'float:fromString(io:readln("Enter updated product price: ")),
                        stock_quantity: check 'int:fromString(io:readln("Enter updated stock quantity: ")),
                        sku: updateSku,
                        status: "available"
                    }
                };
                UpdateProductResponse updateProductResponse = check ep->UpdateProduct(updateProductRequest);
                io:println("UpdateProductResponse: ", updateProductResponse);
            } else if adminOption == "remove" {
                // Remove a product
                string removeSku = io:readln("Enter the SKU of the product to remove: ");
                RemoveProductRequest removeProductRequest = {
                    user_id: user_id,
                    sku: removeSku
                };
                RemoveProductResponse removeProductResponse = check ep->RemoveProduct(removeProductRequest);
                io:println("RemoveProductResponse: ", removeProductResponse);
            } else if adminOption == "exit" {
                break;
            } else {
                io:println("Invalid operation. Please enter add, update, remove, or exit.");
            }
        }
    }

    // Customer Functions
    if userRole == "customer" {
        // ListAvailableProducts RPC call
        ListAvailableProductsRequest listAvailableProductsRequest = {};
        ListAvailableProductsResponse listAvailableProductsResponse = check ep->ListAvailableProducts(listAvailableProductsRequest);
        io:println("ListAvailableProductsResponse: ", listAvailableProductsResponse);

        // SearchProduct RPC call
        string searchSku = io:readln("Enter the SKU of the product to search: ");
        SearchProductRequest searchProductRequest = {sku: searchSku};
        SearchProductResponse searchProductResponse = check ep->SearchProduct(searchProductRequest);
        io:println("SearchProductResponse: ", searchProductResponse);

        // AddToCart RPC call
        while true {
            string addToCartOption = io:readln("Do you want to add a product to your cart? (yes/no): ");
            if addToCartOption.toLowerAscii() == "yes" {
                string addToCartSku = io:readln("Enter the SKU of the product to add to cart: ");
                AddToCartRequest addToCartRequest = {
                    user_id: user_id,
                    sku: addToCartSku
                };
                AddToCartResponse addToCartResponse = check ep->AddToCart(addToCartRequest);
                io:println("AddToCartResponse: ", addToCartResponse);
            } else {
                break;
            }
        }

        // RemoveFromCart RPC call
        string removeFromCartOption = io:readln("Do you want to remove a product from your cart? (yes/no): ");
        if removeFromCartOption.toLowerAscii() == "yes" {
            string removeFromCartSku = io:readln("Enter the SKU of the product to remove from cart: ");
            RemoveFromCartRequest removeFromCartRequest = {
                user_id: user_id,
                sku: removeFromCartSku
            };
            RemoveFromCartResponse removeFromCartResponse = check ep->RemoveFromCart(removeFromCartRequest);
            io:println("RemoveFromCartResponse: ", removeFromCartResponse);
        }

        // PlaceOrderForAllCartItems RPC call
        PlaceOrderForAllCartItemsRequest placeOrderForAllCartItemsRequest = {
            user_id: user_id
        };
        PlaceOrderForAllCartItemsResponse placeOrderForAllCartItemsResponse = check ep->PlaceOrderForAllCartItems(placeOrderForAllCartItemsRequest);
        io:println("PlaceOrderForAllCartItemsResponse: ", placeOrderForAllCartItemsResponse);
    }
}

function createOrGetUser(string userId, string role) returns error? {
    // Check if user already exists
    OnlineShoppingClient ep = check new ("http://localhost:9090");
    ListUsersRequest listUsersRequest = {};
    ListUsersResponse listUsersResponse = check ep->ListUsers(listUsersRequest);

    foreach var user in listUsersResponse.users {
        if user.user_id == userId {
            io:println("Welcome back, ", user.name);
            return;
        }
    }
    
    //Create new user
    CreateUserRequest createUserRequest = {
        user: {
            user_id: userId,
            name: io:readln("Enter your name: "),
            role: role
        }
    };
    CreateUsersStreamingClient streamingClient = check ep->CreateUsers();
    check streamingClient->sendCreateUserRequest(createUserRequest);
    check streamingClient->complete();
    var response = streamingClient->receiveCreateUsersResponse();
    if response is CreateUsersResponse {
        io:println("User created successfully: Welcome, ", createUserRequest.user.name);
        return;
    } else {
        return error("Failed to create user");
    }
}
