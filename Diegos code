import ballerina/http;
import ballerina/log;

const int EXPRESS_TIME_CONFIRM = 10;
const int DISTANCE_CONFIRM = 100;
const int STANDARD_TIME_CONFIRM = 20;

type ShipmentRequest record {
    string shipmentType;
    int pickupLocation;
    int deliveryLocation;
    int preferredTime;
    string firstName;
    string lastName;
    string contactNumber;
};

// Define the function outside the service to ensure it's recognized
function determineServiceType(ShipmentRequest request) returns string {
    log:printInfo("Determining service type for request: " + request.toString());
    if (request.pickupLocation > DISTANCE_CONFIRM) {
        log:printInfo("Service type determined: International");
        return "International";
    } else if (request.preferredTime > EXPRESS_TIME_CONFIRM) {
        log:printInfo("Service type determined: Standard");
        return "Standard";
    } else if (request.preferredTime < STANDARD_TIME_CONFIRM) {
        log:printInfo("Service type determined: Express");
        return "Express";
    } else {
        log:printInfo("Service type determined: Unknown");
        return "Unknown";
    }
}

service /logistics on new http:Listener(9090) {

    resource function post determineService(http:Caller caller, http:Request req) returns error? {
        json payload = check req.getJsonPayload();
        ShipmentRequest shipmentRequest = check payload.cloneWithType(ShipmentRequest);

        string serviceType = determineServiceType(shipmentRequest);
        json response = { "serviceType": serviceType, "message": "Service determined successfully" };
        check caller->respond(response);
    }
}


// Array to store Programme records
Programme[] programmes = [];

 // Add the new programme to the array in a thread-safe manner
        lock {
            programmes.push(programme);
        }


 // 2. Retrieve a list of all programmes
    resource function get .(http:Caller caller, http:Request req) returns error? {
        // Return the list of all stored programmes
        return caller->respond(programmes);
    }

    // 3. Update an existing programme's information
    resource function put [string programmeCode](http:Caller caller, http:Request req) returns error? {
        log:printInfo("Received PUT request for programme code: " + programmeCode);

        // Check if the programme with the given code exists
        int programmeIndex = -1;
        foreach int i in 0 ..< programmes.length() {
            if programmes[i].programmeCode == programmeCode {
                programmeIndex = i;
                break;
            }
        }
        if programmeIndex == -1 {
            // Send 404 Not Found if the programme does not exist
            log:printInfo("Programme code not found: " + programmeCode);
            return caller->respond(buildErrorResponse(404, "Programme not found"));
        }

        // Extract and validate the JSON payload
        json|error payload = req.getJsonPayload();
        if payload is error {
            // Send 400 Bad Request if the payload is invalid
            log:printInfo("Invalid JSON payload for programme code: " + programmeCode);
            return caller->respond(buildErrorResponse(400, "Invalid JSON payload"));
        }

        // Convert JSON payload to Programme type
        Programme|error updatedProgramme = payload.cloneWithType(Programme);
        if updatedProgramme is error {
            // Send 400 Bad Request if programme data is invalid
            log:printInfo("Invalid programme data for programme code: " + programmeCode);
            return caller->respond(buildErrorResponse(400, "Invalid programme data"));
        }

        // Check if the programme code in the path matches the one in the payload
        if updatedProgramme.programmeCode != programmeCode {
            // Send 400 Bad Request if there is a programme code mismatch
            log:printInfo("Programme code mismatch: Path - " + programmeCode + ", Payload - " + updatedProgramme.programmeCode);
            return caller->respond(buildErrorResponse(400, "Programme code mismatch"));
        }

        // Update the existing programme in the array in a thread-safe manner
        lock {
            programmes[programmeIndex] = updatedProgramme;
        }

        // Respond with success message and updated programme
        json successResponse = { 
            "message": "Programme updated successfully", 
            "programme": <json> updatedProgramme 
        };
        log:printInfo("Programme updated successfully: " + programmeCode);
        return caller->respond(successResponse);
    }

    // 4. Retrieve the details of a specific programme by programme code
    resource function get [string programmeCode](http:Caller caller, http:Request req) returns error? {
        // Iterate over programmes to find the one with the given code
        foreach var programme in programmes {
            if programme.programmeCode == programmeCode {
                // Return the requested programme
                return caller->respond(programme);
            }
        }
        // Send 404 Not Found if the programme doesn't exist
        return caller->respond(buildErrorResponse(404, "Programme not found"));
    }

    // 5. Delete a programme's record by programme code
    resource function delete [string programmeCode](http:Caller caller, http:Request req) returns error? {
        // Check if the programme exists
        int programmeIndex = -1;
        foreach int i in 0 ..< programmes.length() {
            if programmes[i].programmeCode == programmeCode {
                programmeIndex = i;
                break;
            }
        }
        if programmeIndex == -1 {
            // Send 404 Not Found if the programme doesn't exist
            return caller->respond(buildErrorResponse(404, "Programme not found"));
        }

        // Remove the programme from the array in a thread-safe manner
        lock {
            programmes = array:filter(programmes, function(Programme p) returns boolean {
                return p.programmeCode != programmeCode;
            });
        }

        // Send 204 No Content after successful deletion
        http:Response res = new;
        res.statusCode = 204; // No Content
        return caller->respond(res);
    }


    // 7. Retrieve all the programmes that belong to the same faculty
    resource function get faculty/[string facultyName](http:Caller caller, http:Request req) returns error? {
        Programme[] facultyProgrammes = [];
        // Iterate over all programmes and filter by faculty name
        foreach var programme in programmes {
            if programme.faculty.toLowerAscii() == facultyName.toLowerAscii() {
                facultyProgrammes.push(programme);
            }
        }
        // Return the list of programmes in the requested faculty
        return caller->respond(facultyProgrammes);
    }
}

 // Check if a programme with the same code already exists
        foreach var existingProgramme in programmes {
            if existingProgramme.programmeCode == programme.programmeCode {
                // Send 409 Conflict if programme code is already used
                return caller->respond(buildErrorResponse(409, "Programme code already exists"));
            }
        }
