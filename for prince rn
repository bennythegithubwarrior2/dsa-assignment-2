import ballerina/http;
import ballerina/log;
import ballerina/sql;
import ballerinax/mysql;
import ballerinax/mysql.driver as _;
import ballerina/io;

const string DB_URL = "jdbc:mysql://127.0.0.1:3306/dsa_assignment";
const string DB_NAME = "dsa_assignment";
const string DB_USER = "kenny";
const string DB_PASSWORD = "Kennyisthegoat21";
const int DB_PORT = 3306;

const int EXPRESS_TIME_CONFIRM = 10;
const int DISTANCE_CONFIRM = 100;
const int STANDARD_TIME_CONFIRM = 20;

type ShipmentRequest record {
    string shipmentType;
    string pickupLocation;
    string deliveryLocation;  
    int preferredTime;
    string firstName;
    string lastName;
    string contactNumber;
};

type LocationDistance record {
    int DistanceFromHQ;
};

// Define the client record
type Client record {
    int id?;
    string Firstname;
    string Lastname;
    string address;
    string phone;
};

function fetchLocationDistance(string areaName) returns int|error {
    mysql:Client|sql:Error dbClientResult = new ("localhost", DB_USER, DB_PASSWORD, DB_NAME, DB_PORT);

    if (dbClientResult is sql:Error) {
        return dbClientResult;
    }

    mysql:Client dbClient = <mysql:Client>dbClientResult;
    log:printInfo("CONNECTED TO DATABASE");

    int locationDistance = 0;
    sql:ParameterizedQuery query = `SELECT DistanceFromHQ FROM serviceableareas WHERE AreaName = ${areaName}`;

    stream<LocationDistance, sql:Error?> resultStream = dbClient->query(query);

    error? e = resultStream.forEach(function(LocationDistance result) {
        locationDistance = result.DistanceFromHQ;
    });

    if (e is error) {
        log:printError("Error occurred while processing the result stream", e);
    }

    check dbClient.close();
    return locationDistance;
}

function determineServiceType(ShipmentRequest request) returns string|error {
    log:printInfo("Determining service type for request: " + request.toString());
    int locationDistance = check fetchLocationDistance(request.deliveryLocation);

    if (locationDistance > DISTANCE_CONFIRM) {
        log:printInfo("Recommended service type: International");
        return "International";
    } else if (request.preferredTime > EXPRESS_TIME_CONFIRM) {
        log:printInfo("Recommended service type: Standard");
        return "Standard";
    } else if (request.preferredTime < STANDARD_TIME_CONFIRM) {
        log:printInfo("Recommended service type: Express");
        return "Express";
    } else {
        log:printInfo("Service type determined: Unknown");
        return "Unknown";
    }
}
 mysql:Client dbClient = check new (host = "127.0.0.1", user = "bennyman", password = "Sunday11", database = "dsaproject");
function saveToDatabase(Client Client, ShipmentRequest shipmentRequest) returns error? {
    // Insert into customerdetails table
    sql:ParameterizedQuery insertCustomerQuery = `INSERT INTO customerdetails (FirstName, LastName, Phone) VALUES (${Client.Firstname}, ${Client.Lastname}, ${Client.phone})`;
    sql:ExecutionResult _ = check dbClient->execute(insertCustomerQuery);

    // Insert into deliveryservices table
    sql:ParameterizedQuery insertDeliveryQuery = `INSERT INTO deliveryservices (PickupLocation, DeliveryLocation) VALUES (${shipmentRequest.pickupLocation}, ${shipmentRequest.deliveryLocation})`;
    sql:ExecutionResult _ = check dbClient->execute(insertDeliveryQuery);

    sql:ParameterizedQuery insertShippingQuery = `INSERT INTO shippingdetails (ShippingMethod) VALUES (${shipmentRequest.shipmentType})`;
    sql:ExecutionResult _ = check dbClient->execute(insertShippingQuery);
}




service /logistics on new http:Listener(9090) {
   
    // Resource to add a new client
    resource function post .(http:Caller caller, http:Request req) returns error? {
        json|http:ClientError payload = req.getJsonPayload();
        if (payload is http:ClientError) {
            check caller->respond("Invalid JSON payload");
            return;
        }

        Client newClient = check payload.cloneWithType(Client);
        sql:ParameterizedQuery sqlQuery = `INSERT INTO customerdetails (FirstName, LastName, Phone, Address) VALUES (${newClient.Firstname}, ${newClient.Lastname}, ${newClient.phone}, ${newClient.address})`;
        sql:ExecutionResult|sql:Error result = dbClient->execute(sqlQuery);
        if (result is sql:ExecutionResult) {
            check caller->respond("Client added successfully");
            io:println("Client added successfully");
        } else {
            check caller->respond("Failed to add client");
        }
    }
    resource function post determineService(http:Caller caller, http:Request req) returns error? {
        json payload = check req.getJsonPayload();
        ShipmentRequest shipmentRequest = check payload.cloneWithType(ShipmentRequest);

        string serviceType = check determineServiceType(shipmentRequest);
        json response = { "serviceType": serviceType, "message": "Service determined successfully" };
        check caller->respond(response);
    }
}

function init() {
    log:printInfo("---------SERVER IS RUNNING----------");
}




----------------------------------client----------------------------------------



import ballerina/http;
import ballerina/io;
import ballerina/log;

json[] defaultInput = [
    {
        shipmentType: "International",
        pickupLocation: "Dallas, TX",
        deliveryLocation: "Windhoek",
        preferredTime: "02:00 PM",
        firstName: "Jane",
        lastName: "Doe",
        contactNumber: "987-654-3210"
    }
];

// Sample recommended input data
json[] recommendedInput = [
    {
        shipmentType: "Express",
        pickupLocation: "Los Angeles, CA",
        deliveryLocation: "San Francisco, CA",
        preferredTime: "09:00 AM",
        firstName: "John",
        lastName: "Doe",
        contactNumber: "123-456-7890"
    }
];




public function main() returns error? {
    io:println("Enter request type (delivery/tracking): ");
    string requestType = io:readln();

    if (requestType.toLowerAscii() == "delivery") {
        error? handleDeliveryRequestResult = handleDeliveryRequest();
        if (handleDeliveryRequestResult is error) {
            log:printError("Error handling delivery request", handleDeliveryRequestResult);
        }
    } else if (requestType.toLowerAscii() == "tracking") {
        io:println("TRACKING MODE ON");
    } else {
        io:println("Invalid request type. Please enter 'delivery' or 'tracking'.");
    }

        io:println("Use Server's Recommendation (yes/no):");
    string confirmation = io:readln();
    boolean confirm = confirmation == "yes"; 

    boolean result = check booleanOperation(confirm);
    
    if (result) {
        io:println("Recommendation saved to the database.");
    } else {
        io:println("Preferences kept and saved to database");
    }
}


http:Client clientEndpoint = check new ("http://localhost:9090/logistics");

function booleanOperation(boolean confirm, json[] recommendedInput, json defaultInput) returns boolean|error {
    if (confirm) {
         json[] selectedInput = confirm ? recommendedInput : <json[]>defaultInput; 

        http:Response response = check clientEndpoint->post("/saveToDatabase", recommendedInput);

         io:println("Server Response: ", response.toString());
          return true;
    } else {
        http:Response response = check clientEndpoint->post("/saveToDatabase", defaultInput);
        return false;
    }
}

// Fallback function to handle saving the default input data
function saveToDatabase(json data) returns error? {
    // Here you would process the default input as needed or send it somewhere
    io:println("Saving default input: ", data.toString());

    // Optionally, you can make an HTTP request here as well if required
    http:Response response = check clientEndpoint->post("/saveDefaultData", data);
    io:println("Server Response for default input: ", response.toString());
}

function handleDeliveryRequest() returns error? {
    http:Client clientEndpoint = check new ("http://localhost:9090/logistics");
    io:println("+++");
    json[] responses = [];
    boolean continueInput = true;

    while (continueInput) {
        json requestPayload = check getUserInput();
        defaultInput.push(requestPayload);

        io:println("Do you want to enter another request? (yes/no): ");
        string? userResponse = io:readln();
        if (userResponse is string && userResponse.toLowerAscii() != "yes") {
            continueInput = false;
        }
    }

    foreach var requestPayload in defaultInput {
        http:Response response = check clientEndpoint->post("/determineService", requestPayload);
        json responseMessage = check response.getJsonPayload();
        responses.push(responseMessage);
        log:printInfo("Response: " + responseMessage.toString());
    }

    printSummary(defaultInput);
    printResponses(responses);
    io:println("INFORMATION SAVED/POSTED");
}

function getUserInput() returns json|error {
    io:println("Enter shipment type (standard/express/international): ");
    string shipmentType = io:readln();

    io:println("Enter pickup location: ");
    string pickupLocation = io:readln();

    io:println("Enter delivery location: ");
    string deliveryLocation = io:readln();

    io:println("Enter preferred time: ");
    int preferredTime = check 'int:fromString(io:readln());

    io:println("Enter first name: ");
    string firstName = io:readln();

    io:println("Enter last name: ");
    string lastName = io:readln();

    io:println("Enter contact number: ");
    string contactNumber = io:readln();

    return {
        shipmentType: shipmentType,
        pickupLocation: pickupLocation,
        deliveryLocation: deliveryLocation,
        preferredTime: preferredTime,
        firstName: firstName,
        lastName: lastName,
        contactNumber: contactNumber
    };
}
 function correctInput(json[] targetData){

 }
function printSummary(json[] defaultInput) {
    io:println("SUMMARY OF CHOICES:");
    foreach var report in defaultInput {
        io:println(report.toString());
    }
}

function printResponses(json[] responses) {
    io:println("RESPONSES FROM SERVER:");
    foreach var response in responses {
        io:println(response.toString());
    }
}



----------------------------------no error:)--------------------------------------------


import ballerina/http;
import ballerina/io;
import ballerina/log;

json[] defaultInput = [
];
json[] recommendedInput = [
];




public function main() returns error? {
    io:println("Enter request type (delivery/tracking): ");
    string requestType = io:readln();

    if (requestType.toLowerAscii() == "delivery") {
        error? handleDeliveryRequestResult = handleDeliveryRequest();
        if (handleDeliveryRequestResult is error) {
            log:printError("Error handling delivery request", handleDeliveryRequestResult);
        }
    } else if (requestType.toLowerAscii() == "tracking") {
        io:println("TRACKING MODE ON");
    } else {
        io:println("Invalid request type. Please enter 'delivery' or 'tracking'.");
    }

        io:println("Use Server's Recommendation (yes/no):");
    string confirmation = io:readln();
    boolean confirm = confirmation == "yes"; 

    boolean result = check booleanOperation(confirm, defaultInput, recommendedInput);
    
    if (result) {
        io:println("Recommendation saved to the database.");
    } else {
        io:println("Preferences kept and saved to database");
    }
}


http:Client clientEndpoint = check new ("http://localhost:9090/logistics");

function booleanOperation(boolean confirm, json[] defaultInput, json[] recommendedInput) returns boolean|error {
    if (confirm) {
    json[] selectedInput = confirm ? recommendedInput : <json[]>defaultInput;
    json requestPayload = selectedInput[0];
    http:Response response = check clientEndpoint->post("/determineService", requestPayload);


         io:println("Server Response: ", requestPayload.toString());
          return true;
    } else {
        http:Response _ = check clientEndpoint->post("/saveToDatabase", defaultInput);
        return false;
    }
}

function saveToDatabase(json data) returns error? {


    io:println("Saving default input: ", data.toString());

    http:Response response = check clientEndpoint->post("/saveDefaultData", data);
    io:println("Server Response for default input: ", response.getTextPayload());
}

function handleDeliveryRequest() returns error? {
    http:Client clientEndpoint = check new ("http://localhost:9090/logistics");
    io:println("+++");
    json[] responses = [];
    boolean continueInput = true;

    while (continueInput) {
        json requestPayload = check getUserInput();
        defaultInput.push(requestPayload);

        io:println("Do you want to enter another request? (yes/no): ");
        string? userResponse = io:readln();
        if (userResponse is string && userResponse.toLowerAscii() != "yes") {
            continueInput = false;
        }
    }

    foreach var requestPayload in defaultInput {
        http:Response response = check clientEndpoint->post("/determineService", requestPayload);
        json responseMessage = check response.getJsonPayload();
        responses.push(responseMessage);
        log:printInfo("Response: " + responseMessage.toString());
    }

    printSummary(defaultInput);
    printResponses(responses);
    io:println("INFORMATION SAVED/POSTED");
}

function getUserInput() returns json|error {
    io:println("Enter shipment type (standard/express/international): ");
    string shipmentType = io:readln();

    io:println("Enter pickup location: ");
    string pickupLocation = io:readln();

    io:println("Enter delivery location: ");
    string deliveryLocation = io:readln();

    io:println("Enter preferred time: ");
    int preferredTime = check 'int:fromString(io:readln());

    io:println("Enter first name: ");
    string firstName = io:readln();

    io:println("Enter last name: ");
    string lastName = io:readln();

    io:println("Enter contact number: ");
    string contactNumber = io:readln();

    return {
        shipmentType: shipmentType,
        pickupLocation: pickupLocation,
        deliveryLocation: deliveryLocation,
        preferredTime: preferredTime,
        firstName: firstName,
        lastName: lastName,
        contactNumber: contactNumber
    };
}
 function correctInput(json[] targetData){

 }
function printSummary(json[] defaultInput) {
    io:println("SUMMARY OF CHOICES:");
    foreach var report in defaultInput {
        io:println(report.toString());
    }
}

function printResponses(json[] responses) {
    io:println("RESPONSES FROM SERVER:");
    foreach var response in responses {
        io:println(response.toString());
    }
}
